#version 460
#extension GL_GOOGLE_include_directive : require

#include "MeshesParams.h"

layout(local_size_x = 128) in;

struct RenderElement
{
  uint vertexOffset;
  uint indexOffset;
  uint indexCount;
  uint _padding0;
};

struct Bounds
{
  vec2 minPos;
  vec2 maxPos;
};

struct Mesh
{
  uint firstRelem;
  uint relemCount;
};

struct vkDrawIndexedIndirectCommand
{
  uint indexCount;
  uint instanceCount;
  uint firstIndex;
  int vertexOffset;
  uint firstInstance;
};

layout(binding = 0) buffer relems_t
{
  RenderElement relems[];
};
layout(binding = 1) buffer bounds_t
{
  Bounds bounds[];
};
layout(binding = 2) buffer meshes_t
{
  Mesh meshes[];
};
layout(binding = 3) buffer instance_meshes_t
{
  uint instanceMeshes[];
};
layout(binding = 4) buffer instance_matrices_t
{
  mat4 instanceMatrices[];
};
layout(binding = 5) buffer relem_instance_offsets_t
{
  uint relemInstanceOffsets[];
};
layout(binding = 6) buffer draw_relems_instance_indices_t
{
  uint drawRelemsInstanceIndices[];
};
layout(binding = 7) buffer draw_commands_t
{
  vkDrawIndexedIndirectCommand drawCommands[];
};

layout(binding = 8) uniform params_t
{
  MeshesParams params;
};

layout(binding = 9) uniform frustum_planes_t
{
  vec4 frustumPlanes[6];
};

layout(push_constant) uniform push_constant_t
{
  mat4 projView;
};


bool isVisible(vec3 boxMin, vec3 boxMax)
{
  float a = 1.0;

  for (int i = 0; i < 6 && a >= 0.0; i++)
  {
    bvec3 isInside = greaterThan(frustumPlanes[i].xyz, vec3(0));
    vec3 negative = mix(boxMin, boxMax, isInside);

    a = dot(vec4(negative, 1.0), frustumPlanes[i]);
  }

  return (a >= 0.0);
}

void main()
{
  uint meshInstanceIdx = gl_GlobalInvocationID.x;

  if (meshInstanceIdx >= params.instancesCount)
  {
    return;
  }

  if (meshInstanceIdx < params.relemsCount)
  {
    drawCommands[meshInstanceIdx].instanceCount = 0;
  }
  memoryBarrierBuffer();

  uint currentMeshInstance = instanceMeshes[meshInstanceIdx];
  Mesh currentMesh = meshes[currentMeshInstance];

  for (uint relemIdx = currentMesh.firstRelem;
       relemIdx < currentMesh.firstRelem + currentMesh.relemCount;
       relemIdx++)
  {

    vec3 currentMinPos = (instanceMatrices[meshInstanceIdx] *
                          vec4(bounds[relemIdx].minPos.x, -20000.0, bounds[relemIdx].minPos.y, 1.0))
                           .xyz;
    vec3 currentMaxPos = (instanceMatrices[meshInstanceIdx] *
                          vec4(bounds[relemIdx].maxPos.x, 20000.0, bounds[relemIdx].maxPos.y, 1.0))
                           .xyz;

    if (isVisible(currentMinPos, currentMaxPos) || currentMeshInstance == 3)
    {
      uint drawRelemInstance = atomicAdd(drawCommands[relemIdx].instanceCount, 1);
      uint index = relemInstanceOffsets[relemIdx] + drawRelemInstance;
      drawRelemsInstanceIndices[index] = meshInstanceIdx;
    }
  }
}
