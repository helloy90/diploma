#version 460
#extension GL_GOOGLE_include_directive : require

#include "MeshesParams.h"

layout(local_size_x = 128) in;

struct RenderElement {
    uint vertexOffset;
    uint indexOffset;
    uint indexCount;
    uint _padding0;
};

struct Bounds {
    vec3 minPos;
    uint _padding0;
    vec3 maxPos;
    uint _padding1;
};

struct Mesh {
    uint firstRelem;
    uint relemCount;
};

struct vkDrawIndexedIndirectCommand {
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int vertexOffset;
    uint firstInstance;
};

layout(binding = 0) buffer relems_t {
    RenderElement relems[];
};
layout(binding = 1) buffer bounds_t {
    Bounds bounds[];
};
layout(binding = 2) buffer meshes_t {
    Mesh meshes[];
};
layout(binding = 3) buffer instance_meshes_t {
    uint instanceMeshes[];
};
layout(binding = 4) buffer instance_matrices_t {
    mat4 instanceMatrices[];
};
layout(binding = 5) buffer relem_instance_offsets_t {
    uint relemInstanceOffsets[];
};
layout(binding = 6) buffer draw_relems_instance_indices_t {
    uint drawRelemsInstanceIndices[];
};
layout(binding = 7) buffer draw_commands_t {
    vkDrawIndexedIndirectCommand drawCommands[];
};

layout(binding = 8) uniform params_t {
    MeshesParams params;
};

bool within(float left, float value, float right) {
    return (left <= value) && (value <= right);
}

void main() {
    uint meshInstanceIdx = gl_GlobalInvocationID.x;

    if (meshInstanceIdx >= params.instancesCount) {
        return;
    }

    // maybe its better to use for loop here for instance index 0
    // no relation to meshes or relems, just parallelizing setting instanceCount to 0 
    if (meshInstanceIdx < params.relemsCount) {
        drawCommands[meshInstanceIdx].instanceCount = 0;
    }
    memoryBarrierBuffer();

    uint currentMeshInstance = instanceMeshes[meshInstanceIdx];
    Mesh currentMesh = meshes[currentMeshInstance];

    for (uint relemIdx = currentMesh.firstRelem;
         relemIdx < currentMesh.firstRelem + currentMesh.relemCount;
         relemIdx++) {

        uint drawRelemInstance = atomicAdd(drawCommands[relemIdx].instanceCount, 1);
        uint index = relemInstanceOffsets[relemIdx] + drawRelemInstance;
        drawRelemsInstanceIndices[index] = meshInstanceIdx;
    }
}